import asyncio
import json
import logging
import os
import sqlite3
from contextlib import asynccontextmanager
from datetime import datetime
from typing import List, Optional, Tuple

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    ADMIN_IDS = [int(admin_id) for admin_id in os.getenv('ADMIN_ID', '').split(',') if admin_id]
    ORDERS_CHANNEL_ID = os.getenv('ORDERS_CHANNEL_ID')
    NOTIFICATIONS_CHANNEL_ID = os.getenv('NOTIFICATIONS_CHANNEL_ID')
    DATABASE_PATH = 'shop.db'
    STATIC_PATH = 'static'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not Config.BOT_TOKEN:
    logger.error("BOT_TOKEN is not set in .env")
    raise ValueError("BOT_TOKEN is not set in .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=Config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class OrderStates(StatesGroup):
    SELECT_SIZE = State()
    SELECT_CURRENCY = State()
    SELECT_ORDER_ITEMS = State()
    CONFIRM_ORDER = State()

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
@asynccontextmanager
async def get_db():
    conn = None
    try:
        conn = sqlite3.connect(Config.DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        yield conn
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        if conn:
            conn.rollback()
        raise
    finally:
        if conn:
            conn.commit()
            conn.close()

# –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.orders_channel_id = Config.ORDERS_CHANNEL_ID
        self.notifications_channel_id = Config.NOTIFICATIONS_CHANNEL_ID
        self.admin_ids = Config.ADMIN_IDS

    async def send_order_notification(self, user_info, order_items, total_price, currency_code, order_id=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ –∫–∞–Ω–∞–ª –∏ –∞–¥–º–∏–Ω–∞–º"""
        order_number = f"#{order_id}" if order_id else f"#{datetime.now().strftime('%Y%m%d%H%M%S')}"
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

        message = (
            f"üõçÔ∏è <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b> {order_number}\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>\n"
        )

        user_id = user_info.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        username = user_info.get('username', '')
        full_name = user_info.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        message += f"   ‚Ä¢ –ò–º—è: {full_name}\n"
        if username:
            message += f"   ‚Ä¢ Username: @{username}\n"
        message += f"   ‚Ä¢ ID: {user_id}\n"

        message += "\n"

        message += f"üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        for i, item in enumerate(order_items, 1):
            item_name = str(item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'))
            item_size = str(item.get('size', ''))
            item_price = item.get('price', 0)

            message += f"   {i}. {item_name}\n"
            if item_size:
                message += f"      ‚Ä¢ –†–∞–∑–º–µ—Ä: {item_size}\n"
            message += f"      ‚Ä¢ –¶–µ–Ω–∞: {item_price:.2f} {currency_code}\n"

            if i < len(order_items):
                message += "\n"

        message += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total_price:.2f} {currency_code}"
        message += f"\nüïê <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {current_time}\n\n"
        message += f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_order_{user_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_order_{user_id}")
            ],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=f"tg://user?id={user_id}")]
        ])

        channel_sent = False
        if self.orders_channel_id:
            try:
                await self.bot.send_message(
                    chat_id=self.orders_channel_id,
                    text=message,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                channel_sent = True
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.orders_channel_id}")
            except TelegramBadRequest as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∑–∞–∫–∞–∑–æ–≤: {e}")

        if not channel_sent and self.admin_ids:
            for admin_id in self.admin_ids:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=message + "\n\n‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –Ω–µ —É–¥–∞–ª–∞—Å—å.",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                except TelegramBadRequest as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    async def send_bot_started_notification(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        message = "üü¢ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>\n\n–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        if self.notifications_channel_id:
            try:
                await self.bot.send_message(
                    chat_id=self.notifications_channel_id,
                    text=message,
                    parse_mode="HTML"
                )
                logger.info(f"Bot started notification sent to channel {self.notifications_channel_id}")
            except TelegramBadRequest as e:
                logger.error(f"Failed to send bot started notification: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = NotificationService(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    logger.info("Starting init_db")
    try:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("PRAGMA foreign_keys = ON")
        logger.info("Connected to database")

        tables = [
            '''CREATE TABLE IF NOT EXISTS categories
               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                image_path TEXT,
                folder_name TEXT)''',
            '''CREATE TABLE IF NOT EXISTS items
               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                category_id INTEGER,
                name TEXT NOT NULL,
                description TEXT,
                sizes TEXT NOT NULL,
                stock_quantity INTEGER DEFAULT 0,
                FOREIGN KEY (category_id) REFERENCES categories(id))''',
            '''CREATE TABLE IF NOT EXISTS item_images
               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                item_id INTEGER,
                image_path TEXT NOT NULL,
                FOREIGN KEY (item_id) REFERENCES items(id))''',
            '''CREATE TABLE IF NOT EXISTS carts
               (user_id INTEGER,
                item_id INTEGER,
                size TEXT,
                quantity INTEGER DEFAULT 1,
                FOREIGN KEY (item_id) REFERENCES items(id))''',
            '''CREATE TABLE IF NOT EXISTS currencies
               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL UNIQUE,
                rate REAL NOT NULL)''',
            '''CREATE TABLE IF NOT EXISTS user_preferences
               (user_id INTEGER PRIMARY KEY,
                currency_id INTEGER,
                FOREIGN KEY (currency_id) REFERENCES currencies(id))''',
            '''CREATE TABLE IF NOT EXISTS item_prices
               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                item_id INTEGER,
                currency_id INTEGER,
                price REAL NOT NULL,
                FOREIGN KEY (item_id) REFERENCES items(id),
                FOREIGN KEY (currency_id) REFERENCES currencies(id))''',
            '''CREATE TABLE IF NOT EXISTS orders
               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                order_data TEXT NOT NULL,
                total_price REAL NOT NULL,
                currency_code TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''',
            '''CREATE TABLE IF NOT EXISTS banned_users
               (user_id INTEGER PRIMARY KEY,
                banned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)'''
        ]

        for table in tables:
            c.execute(table)

        c.execute("SELECT COUNT(*) FROM currencies")
        if c.fetchone()[0] == 0:
            c.execute("DELETE FROM item_prices")
            c.execute("DELETE FROM user_preferences")
            c.execute("DELETE FROM currencies")
            logger.info("Cleared item_prices, user_preferences, currencies")

            currencies = [('RUB', 1.0), ('BYN', 0.037)]
            c.executemany("INSERT OR IGNORE INTO currencies (name, rate) VALUES (?, ?)", currencies)
            logger.info("Inserted currencies")

        conn.commit()
        logger.info("init_db completed successfully")
    except sqlite3.Error as e:
        logger.error(f"Database error in init_db: {e}")
        raise
    finally:
        conn.close()

# –°–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
class DatabaseService:
    @staticmethod
    async def is_user_banned(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT 1 FROM banned_users WHERE user_id = ?", (user_id,))
            return bool(cursor.fetchone())

    @staticmethod
    async def ban_user(user_id: int) -> bool:
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with get_db() as conn:
            cursor = conn.cursor()
            try:
                cursor.execute("INSERT INTO banned_users (user_id) VALUES (?)", (user_id,))
                return True
            except sqlite3.IntegrityError:
                return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω

    @staticmethod
    async def unban_user(user_id: int) -> bool:
        """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
            return cursor.rowcount > 0

    @staticmethod
    async def get_user_currency(user_id: int) -> Tuple[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                           SELECT currencies.name, currencies.rate
                           FROM user_preferences
                                    JOIN currencies ON user_preferences.currency_id = currencies.id
                           WHERE user_preferences.user_id = ?
                           ''', (user_id,))
            result = cursor.fetchone()
            return (result['name'], result['rate']) if result else ('BYN', 0.037)

    @staticmethod
    async def get_categories() -> List[sqlite3.Row]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name, image_path FROM categories ORDER BY name")
            return cursor.fetchall()

    @staticmethod
    async def get_category_by_id(category_id: int) -> Optional[sqlite3.Row]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM categories WHERE id = ?", (category_id,))
            return cursor.fetchone()

    @staticmethod
    async def get_items_by_category(category_id: int) -> List[sqlite3.Row]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM items WHERE category_id = ?", (category_id,))
            return cursor.fetchall()

    @staticmethod
    async def get_item_by_id(item_id: int) -> Optional[sqlite3.Row]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT name, description, stock_quantity, sizes, category_id FROM items WHERE id = ?",
                (item_id,)
            )
            return cursor.fetchone()

    @staticmethod
    async def get_item_images(item_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT image_path FROM item_images WHERE item_id = ? ORDER BY id",
                (item_id,)
            )
            return [row['image_path'] for row in cursor.fetchall()]

    @staticmethod
    async def get_item_price(item_id: int, currency_code: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                           SELECT price
                           FROM item_prices
                           WHERE item_id = ?
                             AND currency_id = (SELECT id
                                                FROM currencies
                                                WHERE name = ?)
                           ''', (item_id, currency_code))
            result = cursor.fetchone()
            return result['price'] if result else 0.0

    @staticmethod
    async def add_to_cart(user_id: int, item_id: int, size: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO carts (user_id, item_id, size) VALUES (?, ?, ?)",
                (user_id, item_id, size)
            )

    @staticmethod
    async def get_cart_items(user_id: int) -> List[sqlite3.Row]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                           SELECT items.id, items.name, carts.size
                           FROM carts
                                    JOIN items ON carts.item_id = items.id
                           WHERE carts.user_id = ?
                           ''', (user_id,))
            return cursor.fetchall()

    @staticmethod
    async def clear_cart(user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM carts WHERE user_id = ?", (user_id,))

    @staticmethod
    async def remove_from_cart(user_id: int, item_id: int, size: str):
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "DELETE FROM carts WHERE user_id = ? AND item_id = ? AND size = ? LIMIT 1",
                (user_id, item_id, size)
            )

    @staticmethod
    async def get_currencies() -> List[sqlite3.Row]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–ª—é—Ç—ã"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM currencies ORDER BY name")
            return cursor.fetchall()

    @staticmethod
    async def set_user_currency(user_id: int, currency_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT OR REPLACE INTO user_preferences (user_id, currency_id) VALUES (?, ?)",
                (user_id, currency_id)
            )

    @staticmethod
    async def get_currency_name(currency_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ ID"""
        async with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM currencies WHERE id = ?", (currency_id,))
            result = cursor.fetchone()
            return result['name'] if result else 'Unknown'

    @staticmethod
    async def create_order(user_id: int, order_items: List[dict], total_price: float, currency_code: str) -> int:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"""
        async with get_db() as conn:
            cursor = conn.cursor()
            order_data = {
                "items": order_items,
                "user_id": user_id,
                "timestamp": datetime.now().isoformat()
            }
            cursor.execute('''
                           INSERT INTO orders (user_id, order_data, total_price, currency_code, status, created_at)
                           VALUES (?, ?, ?, ?, 'pending', CURRENT_TIMESTAMP)
                           ''', (user_id, json.dumps(order_data, ensure_ascii=False), total_price, currency_code))
            return cursor.lastrowid

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
class MessageManager:
    message_ids = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ chat_id

    @staticmethod
    async def update_message_ids(chat_id: int, message_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞"""
        if chat_id not in MessageManager.message_ids:
            MessageManager.message_ids[chat_id] = []
        MessageManager.message_ids[chat_id].append(message_id)
        logger.debug(f"Updated message IDs for chat {chat_id}: {MessageManager.message_ids[chat_id]}")

    @staticmethod
    async def delete_previous_messages(chat_id: int, exclude_ids: List[int] = None):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö"""
        if chat_id not in MessageManager.message_ids:
            return
        for msg_id in MessageManager.message_ids[chat_id]:
            if exclude_ids and msg_id in exclude_ids:
                continue
            try:
                await bot.delete_message(chat_id=chat_id, message_id=msg_id)
                logger.debug(f"Deleted message {msg_id} in chat {chat_id}")
            except TelegramBadRequest as e:
                logger.warning(f"Failed to delete message {msg_id}: {e}")
        MessageManager.message_ids[chat_id] = [msg_id for msg_id in MessageManager.message_ids[chat_id] if exclude_ids and msg_id in exclude_ids]
        logger.debug(f"Remaining message IDs for chat {chat_id}: {MessageManager.message_ids[chat_id]}")

    @staticmethod
    async def safe_answer_callback(callback: types.CallbackQuery):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback"""
        try:
            await callback.answer()
        except TelegramBadRequest as e:
            if "query is too old" not in str(e):
                logger.warning(f"Failed to answer callback query: {e}")

    @staticmethod
    async def safe_edit_message(
            callback: types.CallbackQuery,
            text: str,
            reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> Optional[types.Message]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
            return callback.message
        except TelegramBadRequest as e:
            logger.warning(f"Failed to edit message: {e}")
            return await bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )

    @staticmethod
    async def safe_delete_message(chat_id: int, message_id: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
        except TelegramBadRequest as e:
            logger.warning(f"Failed to delete message {message_id}: {e}")

    @staticmethod
    def get_valid_images(images: List[str]) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        valid_images = []
        for img in images:
            if img and img.strip():
                full_path = os.path.join(Config.STATIC_PATH, img.replace('/', os.sep))
                if os.path.exists(full_path):
                    valid_images.append(img)
                else:
                    logger.warning(f"Image not found: {full_path}")
        return valid_images

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
class Keyboards:
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data='catalog')],
            [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
            [InlineKeyboardButton(text="üí± –í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data='select_currency')]
        ])

    @staticmethod
    def categories_menu(categories: List[sqlite3.Row]) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        buttons = [
            [InlineKeyboardButton(text=cat['name'], callback_data=f'category_{cat["id"]}')]
            for cat in categories
        ]
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='main')])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def items_menu(items: List[sqlite3.Row], category_id: int) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤"""
        buttons = [
            [InlineKeyboardButton(text=item['name'], callback_data=f'item_{item["id"]}')]
            for item in items
        ]
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='catalog')])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def sizes_menu(sizes: List[str], item_id: int, category_id: int) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ä–∞–∑–º–µ—Ä–æ–≤"""
        buttons = [
            [InlineKeyboardButton(text=f"üìè {size}", callback_data=f'size_{item_id}_{size}')]
            for size in sizes
        ]
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f'category_{category_id}')])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def cart_menu(has_items: bool = False) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã"""
        buttons = []
        if has_items:
            buttons.extend([
                [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')],
                [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')]
            ])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='main')])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def currencies_menu(currencies: List[sqlite3.Row]) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤–∞–ª—é—Ç"""
        buttons = [
            [InlineKeyboardButton(text=curr['name'], callback_data=f'currency_{curr["id"]}')]
            for curr in currencies
        ]
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='main')])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def back_to_main() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')]
        ])

    @staticmethod
    def confirm_order() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='confirm_order')],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cart')],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='main')]
        ])

    @staticmethod
    def order_success() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='catalog')],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')]
        ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command('start'))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} started the bot")

    if await DatabaseService.is_user_banned(user_id):
        await message.answer("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await state.clear()
    keyboard = Keyboards.main_menu()

    sent_message = await message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

    await state.update_data(last_message_id=sent_message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@router.callback_query(F.data == 'main')
async def main_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await MessageManager.safe_answer_callback(callback)
    await state.clear()

    keyboard = Keyboards.main_menu()
    await MessageManager.safe_edit_message(
        callback,
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        keyboard
    )

@router.callback_query(F.data == 'catalog')
async def catalog_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    await MessageManager.safe_answer_callback(callback)

    categories = await DatabaseService.get_categories()

    if not categories:
        keyboard = Keyboards.back_to_main()
        await MessageManager.safe_edit_message(
            callback,
            "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n–ü–æ–∫–∞ —á—Ç–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.",
            keyboard
        )
        return

    keyboard = Keyboards.categories_menu(categories)
    await MessageManager.safe_edit_message(
        callback,
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        keyboard
    )

@router.callback_query(F.data.startswith('category_'))
async def category_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    await MessageManager.safe_answer_callback(callback)

    category_id = int(callback.data.split('_')[1])
    category = await DatabaseService.get_category_by_id(category_id)

    if not category:
        await MessageManager.safe_edit_message(
            callback,
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            Keyboards.back_to_main()
        )
        return

    category_name = category['name']
    category_image = category['image_path']
    full_image_path = os.path.join(Config.STATIC_PATH, category_image.replace('/', os.sep)) if category_image else None
    image_exists = os.path.exists(full_image_path) if full_image_path else False
    logger.debug(f"Category {category_name} image path: {category_image}, exists: {image_exists}, full path: {full_image_path}")

    items = await DatabaseService.get_items_by_category(category_id)
    currency_code, _ = await DatabaseService.get_user_currency(callback.from_user.id)

    if not items:
        keyboard = Keyboards.back_to_main()
        text = f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\nüì¶ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
    else:
        keyboard = Keyboards.items_menu(items, category_id)
        items_text = []
        for item in items:
            price = await DatabaseService.get_item_price(item['id'], currency_code)
            items_text.append(f"‚Ä¢ {item['name']} - {price:.2f} {currency_code}")
        text = f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n" + "\n".join(items_text)

    await MessageManager.safe_delete_message(callback.message.chat.id, callback.message.message_id)

    if category_image and image_exists:
        try:
            sent_message = await bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=FSInputFile(full_image_path),
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await MessageManager.update_message_ids(callback.message.chat.id, sent_message.message_id)
            await MessageManager.delete_previous_messages(callback.message.chat.id, [sent_message.message_id])
        except TelegramBadRequest as e:
            logger.warning(f"Failed to send category photo {category_image}: {e}")
            sent_message = await bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await MessageManager.update_message_ids(callback.message.chat.id, sent_message.message_id)
            await MessageManager.delete_previous_messages(callback.message.chat.id, [sent_message.message_id])
    else:
        sent_message = await bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await MessageManager.update_message_ids(callback.message.chat.id, sent_message.message_id)
        await MessageManager.delete_previous_messages(callback.message.chat.id, [sent_message.message_id])

@router.callback_query(F.data.startswith('item_'))
async def item_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞"""
    await MessageManager.safe_answer_callback(callback)

    item_id = int(callback.data.split('_')[1])
    item = await DatabaseService.get_item_by_id(item_id)

    if not item:
        sent_message = await bot.send_message(
            chat_id=callback.message.chat.id,
            text="‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=Keyboards.back_to_main(),
            parse_mode="HTML"
        )
        await MessageManager.update_message_ids(callback.message.chat.id, sent_message.message_id)
        await MessageManager.delete_previous_messages(callback.message.chat.id, [sent_message.message_id])
        return

    currency_code, _ = await DatabaseService.get_user_currency(callback.from_user.id)
    price = await DatabaseService.get_item_price(item_id, currency_code)
    images = await DatabaseService.get_item_images(item_id)
    valid_images = MessageManager.get_valid_images(images)

    sizes = [s.strip() for s in item['sizes'].split(',') if s.strip()]

    text = (
        f"üè∑Ô∏è {item['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {price:.2f} {currency_code}\n"
        f"üìù {item['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {item['stock_quantity']}\n\n"
        f"üëï –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:"
    )

    keyboard = Keyboards.sizes_menu(sizes, item_id, item['category_id'])

    await MessageManager.safe_delete_message(callback.message.chat.id, callback.message.message_id)

    if valid_images:
        try:
            sent_message = await bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=FSInputFile(os.path.join(Config.STATIC_PATH, valid_images[0])),
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await MessageManager.update_message_ids(callback.message.chat.id, sent_message.message_id)
            await MessageManager.delete_previous_messages(callback.message.chat.id, [sent_message.message_id])

            if len(valid_images) > 1:
                media = []
                for img in valid_images[1:4]:
                    try:
                        media.append(InputMediaPhoto(
                            media=FSInputFile(os.path.join(Config.STATIC_PATH, img))
                        ))
                    except Exception as e:
                        logger.warning(f"Failed to add image {img}: {e}")

                if media:
                    try:
                        media_messages = await bot.send_media_group(
                            chat_id=callback.message.chat.id,
                            media=media
                        )
                        for msg in media_messages:
                            await MessageManager.update_message_ids(callback.message.chat.id, msg.message_id)
                    except TelegramBadRequest as e:
                        logger.warning(f"Failed to send media group: {e}")

        except TelegramBadRequest as e:
            logger.warning(f"Failed to send item photo {valid_images[0]}: {e}")
            sent_message = await bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await MessageManager.update_message_ids(callback.message.chat.id, sent_message.message_id)
            await MessageManager.delete_previous_messages(callback.message.chat.id, [sent_message.message_id])
    else:
        sent_message = await bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await MessageManager.update_message_ids(callback.message.chat.id, sent_message.message_id)
        await MessageManager.delete_previous_messages(callback.message.chat.id, [sent_message.message_id])

@router.callback_query(F.data.startswith('size_'))
async def size_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    await MessageManager.safe_answer_callback(callback)

    parts = callback.data.split('_', 2)
    if len(parts) < 3:
        return

    item_id = int(parts[1])
    size = parts[2]
    user_id = callback.from_user.id

    try:
        await DatabaseService.add_to_cart(user_id, item_id, size)

        await MessageManager.safe_edit_message(
            callback,
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\nüìè –†–∞–∑–º–µ—Ä: {size}\n\n"
            "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
            InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='catalog')],
                [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='cart')],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')]
            ])
        )

    except Exception as e:
        logger.error(f"Failed to add item to cart: {e}")
        await MessageManager.safe_edit_message(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É",
            Keyboards.back_to_main()
        )

@router.callback_query(F.data == 'cart')
async def cart_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ö–æ—Ä–∑–∏–Ω–∞"""
    await MessageManager.safe_answer_callback(callback)

    user_id = callback.from_user.id
    cart_items = await DatabaseService.get_cart_items(user_id)
    currency_code, _ = await DatabaseService.get_user_currency(user_id)

    if not cart_items:
        keyboard = Keyboards.cart_menu(False)
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!"
    else:
        total = 0.0
        items_text = ["üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"]

        for item in cart_items:
            price = await DatabaseService.get_item_price(item['id'], currency_code)
            total += price
            items_text.append(
                f"‚Ä¢ {item['name']} (üìè {item['size']}) - {price:.2f} {currency_code}"
            )

        items_text.append(f"\nüí∞ –ò—Ç–æ–≥–æ: {total:.2f} {currency_code}")
        text = "\n".join(items_text)
        keyboard = Keyboards.cart_menu(True)

    await MessageManager.safe_edit_message(callback, text, keyboard)

@router.callback_query(F.data == 'clear_cart')
async def clear_cart_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    await MessageManager.safe_answer_callback(callback)

    try:
        await DatabaseService.clear_cart(callback.from_user.id)
        await MessageManager.safe_edit_message(
            callback,
            "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
            Keyboards.back_to_main()
        )
    except Exception as e:
        logger.error(f"Failed to clear cart: {e}")
        await MessageManager.safe_edit_message(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã",
            Keyboards.back_to_main()
        )

@router.callback_query(F.data == 'select_currency')
async def select_currency_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã"""
    await MessageManager.safe_answer_callback(callback)

    currencies = await DatabaseService.get_currencies()
    keyboard = Keyboards.currencies_menu(currencies)

    await MessageManager.safe_edit_message(
        callback,
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        keyboard
    )

@router.callback_query(F.data.startswith('currency_'))
async def currency_handler(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞–ª—é—Ç—ã"""
    await MessageManager.safe_answer_callback(callback)

    currency_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id

    try:
        await DatabaseService.set_user_currency(user_id, currency_id)
        currency_name = await DatabaseService.get_currency_name(currency_id)

        await MessageManager.safe_edit_message(
            callback,
            f"‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency_name}!",
            Keyboards.back_to_main()
        )

    except Exception as e:
        logger.error(f"Failed to set currency: {e}")
        await MessageManager.safe_edit_message(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã",
            Keyboards.back_to_main()
        )

@router.callback_query(F.data == 'profile')
async def profile_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await MessageManager.safe_answer_callback(callback)

    user = callback.from_user
    currency_code, _ = await DatabaseService.get_user_currency(user.id)
    is_banned = await DatabaseService.is_user_banned(user.id)

    text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üí± –í–∞–ª—é—Ç–∞: {currency_code}\n"
        f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if is_banned else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
    )

    if user.username:
        text += f"üì± Username: @{user.username}\n"

    await MessageManager.safe_edit_message(
        callback,
        text,
        Keyboards.back_to_main()
    )

# === –°–ò–°–¢–ï–ú–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–û–í ===
@router.callback_query(F.data == 'checkout')
async def checkout_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await MessageManager.safe_answer_callback(callback)

    user_id = callback.from_user.id
    cart_items = await DatabaseService.get_cart_items(user_id)

    if not cart_items:
        await MessageManager.safe_edit_message(
            callback,
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            Keyboards.back_to_main()
        )
        return

    currency_code, _ = await DatabaseService.get_user_currency(user_id)
    total = 0.0
    order_details = ["üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n"]

    for item in cart_items:
        price = await DatabaseService.get_item_price(item['id'], currency_code)
        total += price
        order_details.append(
            f"‚Ä¢ {item['name']} (üìè {item['size']}) - {price:.2f} {currency_code}"
        )

    order_details.append(f"\nüí∞ –ò—Ç–æ–≥–æ: {total:.2f} {currency_code}")
    order_details.append("\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:")

    text = "\n".join(order_details)

    await state.update_data(
        cart_items=cart_items,
        total_price=total,
        currency_code=currency_code
    )
    await state.set_state(OrderStates.CONFIRM_ORDER)

    await MessageManager.safe_edit_message(
        callback,
        text,
        Keyboards.confirm_order()
    )

@router.callback_query(F.data == 'confirm_order', OrderStates.CONFIRM_ORDER)
async def confirm_order_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await MessageManager.safe_answer_callback(callback)

    try:
        data = await state.get_data()
        user_id = callback.from_user.id
        cart_items = data['cart_items']
        total_price = data['total_price']
        currency_code = data['currency_code']

        order_items = []
        for item in cart_items:
            price = await DatabaseService.get_item_price(item['id'], currency_code)
            order_items.append({
                'name': item['name'],
                'size': item['size'],
                'price': price
            })

        order_id = await DatabaseService.create_order(
            user_id, order_items, total_price, currency_code
        )

        await DatabaseService.clear_cart(user_id)

        user_info = {
            'id': user_id,
            'username': callback.from_user.username,
            'full_name': callback.from_user.full_name
        }

        await notification_service.send_order_notification(
            user_info, order_items, total_price, currency_code, order_id
        )

        success_text = (
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price:.2f} {currency_code}\n\n"
            "üöö –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!"
        )

        await MessageManager.safe_edit_message(
            callback,
            success_text,
            Keyboards.order_success()
        )

        await state.clear()

    except Exception as e:
        logger.error(f"Failed to create order: {e}")
        await MessageManager.safe_edit_message(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            Keyboards.back_to_main()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@router.callback_query(F.data.startswith("accept_order_"))
async def accept_order(callback: types.CallbackQuery):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    user_id = callback.data.split("_")[-1]

    try:
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            parse_mode="HTML"
        )

        try:
            await bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await callback.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞", show_alert=True)

@router.callback_query(F.data.startswith("reject_order_"))
async def reject_order(callback: types.CallbackQuery):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    user_id = callback.data.split("_")[-1]

    try:
        await callback.message.edit_text(
            callback.message.text + "\n\n‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            parse_mode="HTML"
        )

        try:
            await bot.send_message(
                chat_id=user_id,
                text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞", show_alert=True)

@router.message(Command('ban'), lambda message: message.chat.id == int(Config.NOTIFICATIONS_CHANNEL_ID))
async def ban_user_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""
    if message.from_user.id not in Config.ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")
        return

    if await DatabaseService.ban_user(user_id):
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        try:
            await bot.send_message(
                chat_id=user_id,
                text="üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –±–∞–Ω–µ: {e}")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@router.message(Command('unban'), lambda message: message.chat.id == int(Config.NOTIFICATIONS_CHANNEL_ID))
async def unban_user_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""
    if message.from_user.id not in Config.ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return

    if await DatabaseService.unban_user(user_id):
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        try:
            await bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–∞–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —Ä–∞–∑–±–∞–Ω–µ: {e}")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤
@router.callback_query()
async def unknown_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤"""
    await MessageManager.safe_answer_callback(callback)
    logger.warning(f"Unknown callback data: {callback.data}")

    await MessageManager.safe_edit_message(
        callback,
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
        Keyboards.back_to_main()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def text_message_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()

    if current_state in [OrderStates.CONFIRM_ORDER]:
        return

    await message.answer(
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
        reply_markup=Keyboards.main_menu()
    )

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting Telegram bot")
    logger.info(f"Admin IDs: {Config.ADMIN_IDS}")
    logger.info(f"Orders Channel ID: {Config.ORDERS_CHANNEL_ID}")
    logger.info(f"Notifications Channel ID: {Config.NOTIFICATIONS_CHANNEL_ID}")
    init_db()
    logger.info("Database initialized")

    await notification_service.send_bot_started_notification()

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error in main: {e}")
        raise
    finally:
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        raise